version: '3'

services:
  database:
    image: 'postgres:11.2-alpine'
    container_name: movie-app-database
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', 'movie_database', '-U', 'steve']
      timeout: 20s
      retries: 10
    networks:
      - movie-app-network
    volumes:
      - movie-app-postgres-data:/var/lib/postgresql/data
      - movie-app-postgres-config:/etc/postgresql
      - ./init_sql_scripts/init.sql:/docker-entrypoint-initdb.d/init.sql

  backend:
    image: slamoureux/movie-app-backend:latest
    container_name: movie-app-backend
    build: backend
    ports:
      - '3001:3001'
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_TYPE=${DB_TYPE}
    networks:
      - movie-app-network
    depends_on:
      database:
        condition: service_healthy

  frontend:
    image: slamoureux/movie-app-frontend:latest
    container_name: movie-app-frontend
    build: frontend
    ports:
      - '3000:3000'
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT}
      - REST_API_URL=${REST_API_URL}
    networks:
      - movie-app-network
    depends_on:
      - database
      - backend

volumes:
  movie-app-postgres-data:
  movie-app-postgres-config:

networks:
  movie-app-network:
    name: movie-app-network
    driver: bridge
